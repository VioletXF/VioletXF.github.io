{"version":3,"file":"component---src-pages-404-tsx-6d4c2365d2d949cd6a8e.js","mappings":"0JAoCA,IAlCA,SAAeA,GAAmG,IAAlG,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAA4EH,EAC7G,MACMI,EADY,MACCH,EAASI,UAAgD,SAAvBJ,EAASI,UAAwD,SAAvBJ,EAASI,SAElGC,EAAW,IAAIL,EAASI,SAASE,MAAM,KAAK,GAClD,IAAIC,EAgBJ,OAbEA,EADEJ,GAEAK,EAAAA,EAAAA,KAAA,MAAIC,UAAU,eAAcP,UAC1BM,EAAAA,EAAAA,KAACE,EAAAA,KAAI,CAACC,GAAIN,EAASH,SAAED,OAKvBO,EAAAA,EAAAA,KAACE,EAAAA,KAAI,CAACD,UAAU,mBAAmBE,GAAIN,EAASH,SAC7CD,KAMLW,EAAAA,EAAAA,MAAA,OAAKH,UAAU,iBAAiB,oBAAmBN,EAAWD,SAAA,EAC5DM,EAAAA,EAAAA,KAAA,UAAQC,UAAU,gBAAeP,SAAEK,KACnCC,EAAAA,EAAAA,KAAA,QAAAN,SAAOA,MAQb,C,iDCmBA,IA3CYH,IAIL,IAADc,EAAAC,EAAAC,EAAA,IAJO,YAAEC,EAAW,MAAEf,EAAK,SAAEC,GAIlCH,EACC,MAAM,KAAEkB,IAASC,EAAAA,EAAAA,gBAAe,cAgB1BC,EAAkBH,GAAeC,EAAKG,aAAaJ,YACnDK,EAAgC,QAApBR,EAAGI,EAAKG,oBAAY,IAAAP,OAAA,EAAjBA,EAAmBZ,MAExC,OACEW,EAAAA,EAAAA,MAAAU,EAAAA,SAAA,CAAApB,SAAA,EACEM,EAAAA,EAAAA,KAAA,SAAAN,SAAQmB,EAAgB,GAAEpB,OAAWoB,IAAiBpB,KACtDO,EAAAA,EAAAA,KAAA,QAAMe,KAAK,cAAcC,QAASL,KAClCX,EAAAA,EAAAA,KAAA,QAAMiB,SAAS,WAAWD,QAASvB,KACnCO,EAAAA,EAAAA,KAAA,QAAMiB,SAAS,iBAAiBD,QAASL,KACzCX,EAAAA,EAAAA,KAAA,QAAMiB,SAAS,UAAUD,QAAQ,aACjChB,EAAAA,EAAAA,KAAA,QAAMe,KAAK,eAAeC,QAAQ,aAClChB,EAAAA,EAAAA,KAAA,QACEe,KAAK,kBACLC,SAA0B,QAAjBV,EAAAG,EAAKG,oBAAY,IAAAN,GAAQ,QAARC,EAAjBD,EAAmBY,cAAM,IAAAX,OAAR,EAAjBA,EAA2BY,UAAY,MAElDnB,EAAAA,EAAAA,KAAA,QAAMe,KAAK,gBAAgBC,QAASvB,KACpCO,EAAAA,EAAAA,KAAA,QAAMe,KAAK,sBAAsBC,QAASL,IACzCjB,IACA,C,sGC3CP,MAWa0B,EAAOA,KAAMpB,EAAAA,EAAAA,KAACqB,EAAAA,EAAG,CAAC5B,MAAM,mBAErC,UAbqBF,IAAwB,IAAvB,KAAE+B,EAAI,SAAE9B,GAAUD,EACtC,MAAMgC,EAAYD,EAAKb,KAAKG,aAAanB,MAEzC,OACEW,EAAAA,EAAAA,MAACoB,EAAAA,EAAM,CAAChC,SAAUA,EAAUC,MAAO8B,EAAU7B,SAAA,EAC3CM,EAAAA,EAAAA,KAAA,MAAAN,SAAI,oBACJM,EAAAA,EAAAA,KAAA,KAAAN,SAAG,8DACI,C","sources":["webpack://gatsby-starter-blog/./src/components/layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/pages/404.tsx"],"sourcesContent":["import { Link, PageProps } from \"gatsby\"\n\nfunction Layout({ location, title, children }: { title: string; children: React.ReactNode; location: Location }) {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath || location.pathname === `${rootPath}ko/` || location.pathname === `${rootPath}en/`\n  // extract home path from current path (including language)\n  const homePath = \"/\"+location.pathname.split(\"/\")[1]\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to={homePath}>{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to={homePath}>\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      {/* <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer> */}\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }: {\n  description?: string\n  title: string\n  children?: React.ReactNode\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\nconst NotFoundPage = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata.title\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>404: Not Found</h1>\n      <p>You just hit a route that doesn&#39;t exist... the sadness.</p>\n    </Layout>\n  )\n}\n\nexport const Head = () => <Seo title=\"404: Not Found\" />\n\nexport default NotFoundPage\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`\n"],"names":["_ref","location","title","children","isRootPath","pathname","homePath","split","header","_jsx","className","Link","to","_jsxs","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_Fragment","name","content","property","social","twitter","Head","Seo","data","siteTitle","Layout"],"sourceRoot":""}