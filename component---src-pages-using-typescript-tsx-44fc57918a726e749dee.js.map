{"version":3,"file":"component---src-pages-using-typescript-tsx-44fc57918a726e749dee.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/layout.tsx","webpack://gatsby-starter-blog/./src/components/seo.tsx","webpack://gatsby-starter-blog/./src/pages/using-typescript.tsx"],"sourcesContent":["import { Link, PageProps } from \"gatsby\"\n\nfunction Layout({ location, title, children }: { title: string; children: React.ReactNode; location: Location }) {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath || location.pathname === `${rootPath}ko/` || location.pathname === `${rootPath}en/`\n  // extract home path from current path (including language)\n  const homePath = \"/\"+location.pathname.split(\"/\")[1]\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to={homePath}>{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to={homePath}>\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n      {/* <footer>\n        Â© {new Date().getFullYear()}, Built with\n        {` `}\n        <a href=\"https://www.gatsbyjs.com\">Gatsby</a>\n      </footer> */}\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }: {\n  description?: string\n  title: string\n  children?: React.ReactNode\n}) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","// If you don't want to use TypeScript you can delete this file!\nimport * as React from \"react\"\nimport { PageProps, Link, graphql, HeadFC } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\n\ntype DataProps = {\n  site: {\n    buildTime: string\n  }\n}\n\nconst UsingTypescript: React.FC<PageProps<DataProps>> = ({\n  data,\n  path,\n  location,\n}) => (\n  <Layout title=\"Using TypeScript\" location={location}>\n    <h1>Gatsby supports TypeScript by default!</h1>\n    <p>\n      This means that you can create and write <code>.ts/.tsx</code> files for\n      your pages, components, and <code>gatsby-*</code> configuration files (for\n      example <code>gatsby-config.ts</code>).\n    </p>\n    <p>\n      For type checking you'll want to install <em>typescript</em> via npm and\n      run <em>tsc --init</em> to create a <em>tsconfig</em> file.\n    </p>\n    <p>\n      You're currently on the page \"{path}\" which was built on{\" \"}\n      {data.site.buildTime}.\n    </p>\n    <p>\n      To learn more, head over to our{\" \"}\n      <a href=\"https://www.gatsbyjs.com/docs/how-to/custom-configuration/typescript/\">\n        documentation about TypeScript\n      </a>\n      .\n    </p>\n    <Link to=\"/\">Go back to the homepage</Link>\n  </Layout>\n)\n\nexport const Head: HeadFC<DataProps> = () => <Seo title=\"Using TypeScript\" />\n\nexport default UsingTypescript\n\nexport const query = graphql`\n  {\n    site {\n      buildTime(formatString: \"YYYY-MM-DD hh:mm a z\")\n    }\n  }\n`\n"],"names":["_ref","location","title","children","isRootPath","pathname","homePath","split","header","_jsx","className","Link","to","_jsxs","_site$siteMetadata","_site$siteMetadata2","_site$siteMetadata2$s","description","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","_Fragment","name","content","property","social","twitter","Head","Seo","data","path","Layout","buildTime","href"],"sourceRoot":""}